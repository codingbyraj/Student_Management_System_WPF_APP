//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Collections.Generic;

    public partial class demoEntities : DbContext
    {
        public demoEntities()
            : base("name=demoEntities")
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }


        public virtual ObjectResult<sp_GetStudents_Result> sp_GetStudents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStudents_Result>("sp_GetStudents");
        }

        public List<Nullable<int>> UpdateStudent(Nullable<int> id, string name, string address, string mobile, Nullable<int> stream, Nullable<bool> isDelete)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));

            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));

            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));

            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));

            var streamParameter = stream.HasValue ?
                new ObjectParameter("Stream", stream) :
                new ObjectParameter("Stream", typeof(int));

            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateStudent", idParameter, nameParameter, addressParameter, mobileParameter, streamParameter, isDeleteParameter).ToList();
        }

        public virtual ObjectResult<UpdateSubjects_Result> UpdateSubjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateSubjects_Result>("UpdateSubjects");
        }

        public virtual ObjectResult<GetSubjectMaster_Result> GetSubjectMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubjectMaster_Result>("GetSubjectMaster");
        }

        public virtual ObjectResult<GetSubjects_Result1> GetSubjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubjects_Result1>("GetSubjects");
        }

        public virtual int UpdateUser(Nullable<int> id, string username, string password, string type, Nullable<bool> isDelete)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));

            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));

            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));

            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));

            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", idParameter, usernameParameter, passwordParameter, typeParameter, isDeleteParameter);
        }

        public virtual int SaveToInterTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveToInterTable");
        }

        public virtual int SelfJoinExample(Nullable<int> jobOrderId, Nullable<int> releaseNo)
        {
            var jobOrderIdParameter = jobOrderId.HasValue ?
                new ObjectParameter("JobOrderId", jobOrderId) :
                new ObjectParameter("JobOrderId", typeof(int));

            var releaseNoParameter = releaseNo.HasValue ?
                new ObjectParameter("ReleaseNo", releaseNo) :
                new ObjectParameter("ReleaseNo", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelfJoinExample", jobOrderIdParameter, releaseNoParameter);
        }

        public virtual int SaveDataToInterTable(string iID, Nullable<int> id, string name, Nullable<int> subjectCategoryId, Nullable<bool> status)
        {
            var iIDParameter = iID != null ?
                new ObjectParameter("IID", iID) :
                new ObjectParameter("IID", typeof(string));

            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));

            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));

            var subjectCategoryIdParameter = subjectCategoryId.HasValue ?
                new ObjectParameter("SubjectCategoryId", subjectCategoryId) :
                new ObjectParameter("SubjectCategoryId", typeof(int));

            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveDataToInterTable", iIDParameter, idParameter, nameParameter, subjectCategoryIdParameter, statusParameter);
        }

        public virtual ObjectResult<Nullable<int>> Merge_SubjectMaster_SubjectInterTable(string iID)
        {
            var iIDParameter = iID != null ?
                new ObjectParameter("IID", iID) :
                new ObjectParameter("IID", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Merge_SubjectMaster_SubjectInterTable", iIDParameter);
        }

        public virtual ObjectResult<GetStudents_Result> GetStudents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudents_Result>("GetStudents");
        }

        public virtual ObjectResult<GetMarks_Result3> GetMarks(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMarks_Result3>("GetMarks", studentIdParameter);
        }

        public List<Nullable<int>> CheckUserLogin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));

            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckUserLogin", userNameParameter, passwordParameter).ToList();
        }

        public virtual ObjectResult<GetStudentMarks_Result2> GetStudentMarks(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentMarks_Result2>("GetStudentMarks", studentIdParameter);
        }
        public virtual int UpdateMarks(Nullable<int> studentId, Nullable<int> subjectId, Nullable<int> marks)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));

            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));

            var marksParameter = marks.HasValue ?
                new ObjectParameter("Marks", marks) :
                new ObjectParameter("Marks", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMarks", studentIdParameter, subjectIdParameter, marksParameter);
        }
    }
}
